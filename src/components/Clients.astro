---
import { siteData } from '../data/site.ts';
---

<section id="clientes" class="py-16 lg:py-24 bg-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <span class="inline-block px-4 py-2 bg-primary-blue/10 text-primary-blue font-semibold rounded-full text-sm mb-4">
        Casos de Sucesso
      </span>
      <h2 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-neutral-dark mb-6 leading-tight">
        Marcas e destinos que 
        <span class="text-transparent bg-clip-text bg-gradient-to-r from-primary-blue to-primary-green">
          confiam
        </span>
        <br class="hidden sm:block"> na nossa tecnologia
      </h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
        Empresas e instituições que já transformaram a experiência dos seus visitantes 
        com nossas soluções de turismo interativo.
      </p>
    </div>

    <!-- Clients Logos Marquee -->
    <div class="mb-20 overflow-hidden">
      <div class="marquee-container">
        <div class="marquee-content">
          {siteData.clients.map((client, index) => (
            <div class="group flex items-center justify-center mx-8">
              <a 
                href={client.link} 
                target="_blank" 
                rel="noopener noreferrer"
                class="relative w-56 h-32 flex items-center justify-center p-6 bg-gray-50 rounded-2xl hover:bg-white hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 cursor-pointer"
              >
                <!-- Client Logo -->
                <img 
                  src={client.logo} 
                  alt={client.name}
                  class="max-w-full max-h-full object-contain transition-all duration-300 hover:scale-110"
                />
                
                <!-- Client Name (visible on hover) -->
                <div class="absolute inset-0 bg-primary-green/65 rounded-2xl flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <span class="text-white font-semibold text-sm text-center px-2">
                    {client.name}
                  </span>
                </div>
              </a>
            </div>
          ))}
          <!-- Duplicate for seamless loop -->
          {siteData.clients.map((client, index) => (
            <div class="group flex items-center justify-center mx-8">
              <a 
                 href={client.link} 
                 target="_blank" 
                 rel="noopener noreferrer"
                 class="relative w-56 h-32 flex items-center justify-center p-6 bg-gray-50 rounded-2xl hover:bg-white hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 cursor-pointer"
               >
                <!-- Client Logo -->
                <img 
                  src={client.logo} 
                  alt={client.name}
                  class="max-w-full max-h-full object-contain transition-all duration-300 hover:scale-110"
                />
                
                <!-- Client Name (visible on hover) -->
                <div class="absolute inset-0 bg-primary-green/95 rounded-2xl flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <span class="text-white font-semibold text-sm text-center px-2">
                    {client.name}
                  </span>
                </div>
              </a>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Testimonials Section -->
    <div id="depoimentos" class="relative">
      <!-- Background decoration -->
      <div class="absolute inset-0 bg-gradient-to-br from-blue-50/30 to-green-50/30 rounded-3xl"></div>
      <div class="relative z-10 py-12">
        <!-- Enhanced title section -->
        <div class="text-center mb-12">
          
          <h3 class="text-3xl lg:text-4xl font-bold bg-gradient-to-r from-neutral-dark to-primary-blue bg-clip-text text-transparent mb-4">
            O que nossos clientes dizem
          </h3>
          <p class="text-lg text-gray-600 max-w-2xl mx-auto">
            Resultados concretos para destinos, atrativos e agências
          </p>
        </div>
        
        <!-- Desktop Grid / Mobile Carousel -->
        <div class="max-w-7xl mx-auto">
          <!-- Mobile Carousel -->
          <div class="lg:hidden relative">
            <div id="testimonials-carousel" class="flex overflow-x-auto scrollbar-hide snap-x snap-mandatory gap-6 pb-4" style="scroll-behavior: smooth;">
              {siteData.testimonials.map((testimonial, index) => (
                <div class="flex-none w-80 snap-center">
                  <div class="group relative bg-white rounded-3xl p-8 shadow-lg border border-gray-100 hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 overflow-hidden h-full">
                    <!-- Card gradient overlay -->
                    <div class="absolute inset-0 bg-gradient-to-br from-blue-50/20 to-green-50/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                    
                    <!-- Quote decoration -->
                    <div class="absolute top-4 right-4 text-6xl text-primary-blue/10 font-serif leading-none">
                      "
                    </div>
                    
                    <div class="relative z-10">
                      <div class="flex items-center mb-6">
                        {testimonial.avatar ? (
                          <img 
                            src={testimonial.avatar} 
                            alt={testimonial.name}
                            class="w-16 h-16 rounded-full object-cover mr-4 border-3 border-white shadow-lg ring-2 ring-primary-blue/20"
                          />
                        ) : (
                          <div class="w-16 h-16 bg-gradient-to-br from-primary-blue to-primary-green rounded-full flex items-center justify-center text-white font-bold mr-4 shadow-lg">
                            {testimonial.name.charAt(0)}
                          </div>
                        )}
                        <div>
                          <h5 class="font-bold text-lg text-neutral-dark">{testimonial.name}</h5>
                          <p class="text-sm text-gray-600 font-medium">{testimonial.role}</p>
                          <p class="text-xs text-primary-blue font-semibold">{testimonial.company}</p>
                        </div>
                      </div>
                   
                      <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center space-x-1">
                          {Array.from({ length: 5 }).map((_, i) => (
                            <svg class="w-5 h-5 text-accent-amber drop-shadow-sm" fill="currentColor" viewBox="0 0 20 20">
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                            </svg>
                          ))}
                        </div>
                        <span class="text-sm font-bold text-accent-amber bg-accent-amber/10 px-3 py-1 rounded-full">5.0</span>
                      </div>
                      
                      <blockquote class="text-gray-700 leading-relaxed text-base font-medium relative">
                        <span class="text-primary-blue text-3xl font-serif absolute -top-2 -left-1 opacity-50">"</span>
                        <span class="ml-6">{testimonial.comment}</span>
                        <span class="text-primary-blue text-3xl font-serif opacity-50">"</span>
                      </blockquote>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            <!-- Carousel Navigation -->
            <div class="flex justify-center mt-6 space-x-2">
              {siteData.testimonials.map((_, index) => (
                <button 
                  class="carousel-dot w-3 h-3 rounded-full bg-gray-300 hover:bg-primary-blue transition-colors duration-200"
                  data-index={index}
                ></button>
              ))}
            </div>
            
            <!-- Navigation Arrows -->
            <button id="prev-btn" class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 bg-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-200 z-10">
              <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button id="next-btn" class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 bg-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-200 z-10">
              <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
          
          <!-- Desktop Grid -->
          <div class="hidden lg:grid lg:grid-cols-2 xl:grid-cols-3 gap-8">
            {siteData.testimonials.map((testimonial, index) => (
           <div class="group relative bg-white rounded-3xl p-8 shadow-lg border border-gray-100 hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 overflow-hidden">
             <!-- Card gradient overlay -->
             <div class="absolute inset-0 bg-gradient-to-br from-blue-50/20 to-green-50/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
             
             <!-- Quote decoration -->
             <div class="absolute top-4 right-4 text-6xl text-primary-blue/10 font-serif leading-none">
               "
             </div>
             
             <div class="relative z-10">
               <div class="flex items-center mb-6">
                 {testimonial.avatar ? (
                   <img 
                     src={testimonial.avatar} 
                     alt={testimonial.name}
                     class="w-16 h-16 rounded-full object-cover mr-4 border-3 border-white shadow-lg ring-2 ring-primary-blue/20"
                   />
                 ) : (
                   <div class="w-16 h-16 bg-gradient-to-br from-primary-blue to-primary-green rounded-full flex items-center justify-center text-white font-bold mr-4 shadow-lg">
                     {testimonial.name.charAt(0)}
                   </div>
                 )}
                 <div>
                   <h5 class="font-bold text-lg text-neutral-dark">{testimonial.name}</h5>
                   <p class="text-sm text-gray-600 font-medium">{testimonial.role}</p>
                   <p class="text-xs text-primary-blue font-semibold">{testimonial.company}</p>
                 </div>
               </div>
            
               <div class="flex items-center justify-between mb-6">
                 <div class="flex items-center space-x-1">
                   {Array.from({ length: 5 }).map((_, i) => (
                     <svg class="w-5 h-5 text-accent-amber drop-shadow-sm" fill="currentColor" viewBox="0 0 20 20">
                       <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                     </svg>
                   ))}
                 </div>
                 <span class="text-sm font-bold text-accent-amber bg-accent-amber/10 px-3 py-1 rounded-full">5.0</span>
               </div>
               
               <blockquote class="text-gray-700 leading-relaxed text-base font-medium relative">
                 <span class="text-primary-blue text-3xl font-serif absolute -top-2 -left-1 opacity-50">"</span>
                 <span class="ml-6">{testimonial.comment}</span>
                 <span class="text-primary-blue text-3xl font-serif opacity-50">"</span>
               </blockquote>
             </div>
             </div>
           </div>
          ))}
        </div>
      </div>
    </div>
    </div>

  </div>
</section>

<style>
  .marquee-container {
    width: 100%;
    position: relative;
  }

  .marquee-content {
    display: flex;
    animation: marquee 30s linear infinite;
    width: fit-content;
  }

  @keyframes marquee {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  .marquee-content:hover {
    animation-play-state: paused;
  }

  /* Hide scrollbar */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Active dot style */
  .carousel-dot.active {
    background-color: #1e40af;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('testimonials-carousel');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dots = document.querySelectorAll('.carousel-dot');
    
    if (!carousel) return;
    
    let currentIndex = 0;
    const cardWidth = 320; // 80 * 4 (w-80 = 320px)
    const gap = 24; // gap-6 = 24px
    const scrollAmount = cardWidth + gap;
    
    function updateDots() {
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentIndex);
      });
    }
    
    function scrollToIndex(index) {
      currentIndex = Math.max(0, Math.min(index, dots.length - 1));
      carousel.scrollTo({
        left: currentIndex * scrollAmount,
        behavior: 'smooth'
      });
      updateDots();
    }
    
    // Navigation arrows
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        scrollToIndex(currentIndex - 1);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        scrollToIndex(currentIndex + 1);
      });
    }
    
    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        scrollToIndex(index);
      });
    });
    
    // Initialize
    updateDots();
    
    // Update current index based on scroll position
    carousel.addEventListener('scroll', () => {
      const scrollLeft = carousel.scrollLeft;
      const newIndex = Math.round(scrollLeft / scrollAmount);
      if (newIndex !== currentIndex) {
        currentIndex = newIndex;
        updateDots();
      }
    });
  });
</script>